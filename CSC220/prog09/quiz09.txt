FINISHED 9.5/10


0. Give two reasons you might use Insertion Sort instead of Heap Sort.


	It is faster with numbers already almost sorted.


	It is simpler with a smaller number n's.


1. Give one way Merge Sort is worse than Heap Sort and one way it is better.


	Worse b/c...
	Merge sort does not keep numbers in place, it requires two arrays that move the numbers.
		By extension, Heap Sort is just a tree that keeps numbers in one array.

	Better b/c..
	Merge is better with Linked Lists because it insterts and deletes in O(1).
		Also is able to be done on hard drives and with "Big Data".


2. Show the individual changes to the array for the next insertion (the 2) in
   Insertion Sort.  Write out the entire array each time.

	1 1 3 5 9 2 6
        ---------
	Take out the [2]
	1 1 3 5 9 []| 6 (ignore the 6, havent gotten there yet)
---
	1 1 3 5 9 9 | 6
---
	1 1 3 5 5 9 | 6
---
	1 1 3 3 5 9 | 6
---
	1 1 [2] 3 5 9 | 6 (place the two here because 2 > 1).
---
	1 1 3 3 5 9 6

3. Heap Sort is in first, heapifying phase.  Show the sequence of required swaps to
   finish putting the array into heap order with the **LARGEST** on top.  You can
   use the tree version.

	3 1 9 6 5 4 2 1

	      3
          1       9
        6   5   4   2
      1
---
              3
          6       9
        1   5   4   2
      1
---
              9
          6       3
        1   5   4   2
      1
---
              9
          6       4
        1   5   3   2
      1



4. Heap Sort is in the removal phase.  The 9 has already been removed (size==7).
   Show the entire array (or tree) after each swap used to remove the 6.

	6 4 5 1 1 3 2 9
        -------------

	      6
          4       5
        1   1   3   2
     (9)
---
	      2
          4       5
        1   1   3   (6)
     (9)
---
	      5
          4       2
        1   1   3   (6)
     (9)
---
	      5
          4       3
        1   1   2   (6)
     (9)



5. Quick Sort is using the 3 as the pivot.  Show the swaps that partition it
   into elements <=3, =3, >3.

	3 1 4 1 5 9 2 6 (Start)
---

	1 3 4 1 5 9 2 6 (swap 1 & 3)
---     - -

	1 3 2 1 5 9 4 6 (swap 2 & 4)
---         -       -

	1 2 3 1 5 9 4 6 (swap 2 & 3)
---       - -

	1 2 1 3 5 9 4 6 (swap 1 & 3)
            - -

For questions 6-9:

	a) Is it stable?

	b) What is the worst case O() running time?

	c) What is the O() running time on randomly ordered input?


6. Insertion Sort.

a) Yes

b) O(n^2)

c) O(n^2)



7. Heap Sort.

a) No

b) O(n logn)

c) O (n logn)



8. Quick Sort in place always using first element as pivot.

a) No

b) O(n^2)

c) O(n logn)



9. Merge Sort.

a) Yes

b) O(n logn)

c) O(n logn)

