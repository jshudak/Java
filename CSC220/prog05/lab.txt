1. Finish implementing ArrayStack.java.  Copy the missing methods from
   StackInterface, including their javadoc and fill them in.  Use
   StackTester (NOT TestStack) to test it "by hand".  Since I set
   INITIAL_CAPACITY to 4, it will crash when you push the fifth item.

   If it working with less than five items, implement reallocate() and
   modify push to use it.

   If you think you have it right, run TestStack.  If it fails, that
   means you forgot some tests while you were running StackTester.  If
   so, try to be more thorough when you implement LinkedStack and
   ListStack for homework.  Try to test them completely using
   StackTester and then run TestStack for your grade.


2. For the rest of the lab you will be creating a simple expression
   calculator in Calculator.java.

   To do so you need two stacks: one to contain operators and the
   other to contain operands (numbers).  When an operand is
   encountered it is pushed onto the operand stack.  When an operator
   is encountered, it is processed as described in the infix to
   postfix algorithms.  When an operator is popped off the operator
   stack, it is processed as described in the postfix evaluation
   algorithm: the top two operands are popped off the operand stack,
   the operation is performed, and the result is pushed back onto the
   operand stack.

   a. Implement numberStackToString using the hints provided.

Enter arithmetic expression or cancel. 
2+3*4
numberStack:  2.0
operatorStack: 
numberStack:  2.0
operatorStack: 
numberStack:  2.0 3.0
operatorStack: 
numberStack:  2.0 3.0
operatorStack: 
numberStack:  2.0 3.0 4.0
operatorStack: 
numberStack:  2.0 3.0 4.0
operatorStack: 
numberStack:  2.0 3.0 4.0
operatorStack: 
2+3*4 = 4.0

   b. Ditto operatorStackToString.

Enter arithmetic expression or cancel. 
2+3*4
numberStack:  2.0
operatorStack: 
numberStack:  2.0
operatorStack:  +
numberStack:  2.0 3.0
operatorStack:  +
numberStack:  2.0 3.0
operatorStack:  + *
numberStack:  2.0 3.0 4.0
operatorStack:  + *
numberStack:  2.0 3.0 4.0
operatorStack:  +
numberStack:  2.0 3.0 4.0
operatorStack: 
2+3*4 = 4.0

   c. Finish evaluateOperator by adding cases for -,*,/, and ^.  Use
      Math.pow for ^.

   d. Implement evaluateTopOperator.  It should pop an operator off
      the operator stack and two number off the number stack.  Then
      it should call evaluateOperator and push the result on the
      number stack.  Call displayStacks() before you return.

Enter arithmetic expression or cancel. 
4-2
numberStack:  4.0
operatorStack: 
numberStack:  4.0
operatorStack:  -
numberStack:  4.0 2.0
operatorStack:  -
numberStack:  -2.0
operatorStack: 
4-2 = -2.0

   e. Did you get -2 instead of 2?  If so, then fix
      evaluateTopOperator!  Remember, things come out of a stack in
      the reverse order that they go in.

Enter arithmetic expression or cancel. 
4-2
numberStack:  4.0
operatorStack: 
numberStack:  4.0
operatorStack:  -
numberStack:  4.0 2.0
operatorStack:  -
numberStack:  2.0
operatorStack: 
4-2 = 2.0

   f. Try 2*3+4.  You should bet 14 instead of 10 because it doesn't
      understand that * has higher "precedence" than +.  You will fix
      this for the homework.

      Here, I show where it is in the expression for each step by
      writing out the expression and putting an arrow below what is
      being read.  So

2*3+4
^
      means we are reading the 2.


2*3+4
^
numberStack:  2.0
operatorStack: 

2*3+4
 ^
numberStack:  2.0
operatorStack:  *

2*3+4
  ^
numberStack:  2.0 3.0
operatorStack:  *

2*3+4
   ^
numberStack:  2.0 3.0
operatorStack:  * +

2*3+4
    ^
numberStack:  2.0 3.0 4.0
operatorStack:  * +

2*3+4
     ^
numberStack:  2.0 7.0
operatorStack:  *

2*3+4
     ^
numberStack:  14.0
operatorStack: 
2*3+4 = 14.0


HOMEWORK

3. Implement LinkedStack.java.  Modify StackTester to test and then
   modify and grade yourself with TestStack.


4. Ditto ListStack.


5. Modify Calculator so it understands operator precedence:

  static final String OPERATORS = "()+-*/u^";
  static final int[] PRECEDENCE = { -1, -1, 1, 1, 2, 2, 3, 4 };

   OPERATORS has all the value operators.
   PRECEDENCE has its corresponding precedence.

   a. Implement:

  int precedence (char op)
    // Return the precedence value of op.  For example,
    // precedence('/') returns 2.

   b. Modify processOperator to use the following logic:

  While the top element (if there is one) of the operator stack has
  precedence >= than the precedence of op,
    evaluate it (call evaluateTopOperator()),

  then push op on the stack.

2-3-4*2
^
numberStack: 2
operatorStack:   

2-3-4*2
 ^
numberStack: 2 
operatorStack: -  

2-3-4*2
  ^
numberStack: 2 3
operatorStack: -

2-3-4*2
   ^
numberStack: -1
operatorStack:   

2-3-4*2
   ^
numberStack: -1
operatorStack: -  

2-3-4*2
    ^
numberStack: -1 4
operatorStack: -  

2-3-4*2
     ^
numberStack: -1 4
operatorStack: - *

2-3-4*2
      ^
numberStack: -1 4 2
operatorStack: - *

2-3-4*2
       ^
numberStack: -1 8
operatorStack: -  

2-3-4*2
       ^
numberStack: -9
operatorStack:   


6. Modify your program so it works with parentheses.  You should only
   have to modify processOperator.

processOperator('(') ?
push it!  That's it.

processOperator(')') ?
while the top of the stack is not '('
  evaluate the top operator
pop the '('.  That's it.

(1-2)*3
^
numberStack:
operatorStack: (

(1-2)*3
 ^
numberStack: 1
operatorStack: (

(1-2)*3
  ^
numberStack: 1
operatorStack: ( -

(1-2)*3
   ^
numberStack: 1 2
operatorStack: ( -

(1-2)*3
    ^
numberStack: -1
operatorStack: (

(1-2)*3
    ^
numberStack: -1
operatorStack:

(1-2)*3
     ^
numberStack: -1
operatorStack: *

(1-2)*3
      ^
numberStack: -1 3
operatorStack: *

(1-2)*3
       ^
numberStack: -3
operatorStack:

Try (1-(2-3))*3 and (6+2)*(1+3).


7. Modify your program so it understands unary minus: -1 - -3 = 2.

   a. Detecting unary '-': if you see a '-' and the previous token
   read was either a number or a ')', then you know that this is a
   binary '-'.  Otherwise it is a unary 'u'.  If the latter, you
   should change the operator internally to 'u'.

   So you need to add a boolean variable previousWasNumberOrClose to
   Calculator that is true if the previous token was a number or a
   close parenthesis ')'.  Set it to the appropriate value whenever
   doNumber or doOperator is called.

   If doOperator is called with '-', use this variable to decide
   between calling processOperator with 'u' instead of op.

   b. Processing unary '-': to process 'u' in processOperator, just
   push it on the operator stack.  That's it!

   c. Evaluating unary 'u': in evaluateTopOperator, if the top is 'u',
   pop the number stack JUST ONCE, negate the number (-a), and push it
   again.


-2--3
^
numberStack: 
operatorStack: u

-2--3
  ^
numberStack: -2
operatorStack: 

-2--3
  ^
numberStack: -2
operatorStack: -

-2--3
   ^
numberStack: -2
operatorStack: - u

-2--3
    ^
numberStack: -2 3
operatorStack: - u

-2--3
     ^
numberStack: -2 -3
operatorStack: -

-2--3
     ^
numberStack: 1
operatorStack: 


   Make sure that -2^-4 = -0.0625.




