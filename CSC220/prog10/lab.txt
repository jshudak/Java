1. Run ChainedHashTable.  It should run, but removes won't happen.

   Study put carefully and ask questions if you don't understand it.

   Implement remove using the comments provided.  See step01.txt.


2. Run OpenHashTable.  Study the documentation above find.  Make sure
   you understand what it is supposed to do and why.  Study the put
   and remove methods.  Ask questions.

   Implement find.  See step02.txt.


3. Implement OpenHashTable rehash.  Change DEFAULT_CAPACITY to 5.
   Test.  See step03.txt.


HOMEWORK

4. Implement ChainedHashTable rehash.  See step04.txt.


5. Modify OpenHashTable to have an int variable called numNull which
   is the number of null entries in the table.  Modify the rule for
   rehashing to be that if less than half of the entries are null,
   then rehash with a new table length four times size.  (Instead of
   comparing size to length/2, compare numNull.)  See step05.txt.


6. Test your hash table implementations with Jumble.java (provided).


7. Modify Jumble so that it keeps a list of words that match each
   pattern: Map<String, List<String>>.  Test on "rdea".


8. Add a second loop that prompts the user for a set of clue letters
   and the length of the first pun word.  This loop should activate
   when the user clicks cancel when asked for a word to unjumble.

   a. Sort the letters (sortedLetters).

   b. Declare key1index and initialize it to zero.  It is the index
      of the current letter in key1.

      For each key (key1) that has the right length:

      i. Create an empty string key2.

      ii. For each letter in sortedLetters, if
            key1 is done (no more current letters),
               add the letter to key2;
            it matches the current letter in key1,
               make the next letter in key1 the current letter;
            if it comes after alphabetically the current letter in key1,
               stop looking at this key1.
          Otherwise, add that letter to key2.

   c. If all the letters in key1 were found in letters and if key2 is
      a valid key, display the lists for key1 and key2.

   See split.txt for an example of this algorithm in action.

   Test on the Jumble examples.  Use dict instead of words.
    
9. Make sure Jumble can load in dict and unscramble words using your
   ChainedHashTable or OpenHashTable instead of HashMap.

   It will not be able to solve the pun without doing the extra credit
   too.


EXTRA CREDIT (for 50 points on an assignment you have less than 50)

10. Implement EntryIterator in ChainedHashTable.  When you finish, the
    special loop in main should work.  Jumble should solve puns now.
    
11. Ditto OpenHashTable.

