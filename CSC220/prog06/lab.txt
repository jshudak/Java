0. Run prog06/MaintainQueue and make sure you know how it works.  It
   won't print the list of names in the queue until you implement
   toString in the next step.  Add a few people, peek, remove, etc.
   What happens when you peek at an empty queue?


1. Implement toString in MaintainQueue:  visit the elements of
   customers using the new kind of for loop and append them to a
   single String separated by new-line ("\n").  Test.


2. In ArrayQueue.java, read and understand offer and peek.  This means
   that you are ready to write either of them on the quiz.  Implement
   poll.

   Switch MaintainQueue to using ArrayQueue.  Make sure it is working.
   It won't print the list (and position won't work) because the
   special loop won't work for ArrayQueue until you implement
   iterator.  Also, because you don't reallocate and the capacity is
   five, if you add six people, the sixth person will become first in
   line!


3. Modify offer to call reallocate when it needs to.  Finish
   implementing reallocate.  Do the following size times:  copy the
   element with index first to the new element array and then move
   first forward one.  The first element copied goes into
   newElements[0].  The second goes into newElement[1], and so forth.

   What new values should first and last have? Test.


4. Implement iterator().

   a. In the inner Iter class, give the class an int variable named
      entry.  This will be the index of the next entry.

   b. In the constructor (of Iter), initialize entry to first if the
      queue is not empty, otherwise -1.

   c. hasNext() returns true if entry is not -1.

   d. next() returns the element with index entry.  It also moves
      entry one forward in the queue or sets it to -1 if it was the
      last entry.  The value returned should be for the old value of
      entry.

   e. Test MaintainQueue again.

   If you are sure you have tested ArrayQueue thoroughly using
   MaintainQueue, run TestArrayQueue.


IF YOU HAVE TIME

5. Run prog06.jar (double-click on it).  Play the game as a human.
   Can you get from lead to gold?  pass to fail?  trash to money?
   Does the computer get there in fewer words?

   Create a class WordPath.  Its constructor should take a
   UserInterface and store it in a class variable.

public class WordPath { // WordPath class
  UserInterface ui; // class variable

  WordPath (UserInterface ui) { // constructor that takes a UserInterface
    this.ui = ui; // and stores it in a class variable
  }

   In its main method, create a new WordPath with a new GUI and store
   the WordPath in game.  Ask the user for a starting word and a
   target word.  Ask if the human or the computer should play:

    String[] commands = { "Human plays.", "Computer plays." };

   Call game.play or game.solve with the starting word and the target
   word.  (solve will empty for now.)

   In play, do the following forever (until the return occurs).  Tell
   the user the current word (the start) and the target word.  Ask for
   the next word.  Set the start word variable to that next word.  If
   it equals the target, tell the user ``You win!'' and return.
   Otherwise keep looping.  Test.


HOMEWORK

6. Create a static boolean method oneLetterDifferent which takes two
   String as input and returns true if they have the same length and
   differ in exactly one character.

   Modify play so that it calls oneLetterDifferent.  It should warn
   the user and NOT change the current (start) word variable if the
   word that the user suggests is not one letter away from the current
   start word.  Test.


7. In LinkedQueue.java, implement offer, peek, and poll.  Don't forget
   about incrementing and decrementing size.  Test using
   MaintainQueue.  The list won't be printed yet.


8. Implement Iter.  This time the entry variable in Iter is of type
   Entry.  When you are sure you have tested it thoroughly using
   MaintainQueue, run TestLinkedQueue.


9. In Wordpath main, just after creating the new WordPath in main, ask
   the user for the name of a word file and call
   game.loadWords(filename).  Add a private static Entry class to
   WordPath with a String word and an Entry previous but NOT a next.
   Add a List<Entry> wordEntries to WordPath initialized to an
   ArrayList<Entry>.  For each word in the word file, loadWords should
   read in the word, create a Entry from it, and add this Entry to
   wordEntries.

   Write a find method that takes a String word and finds that word in
   wordEntries.  It should return the entry for that word or null if
   not there.  Modify play so it also refuses a word not in words.
   Test using the words file called words in the prog06 directory:
   copy it to the csc220 Eclipse project folder.


10. Now to implement WordPath.solve.  Inside solve, create a Queue of
   Entry.  Find the entry belonging to the start word and put it into
   the queue.  Also save it in a variable since you will need to refer
   to it again later.

   While the queue is not empty, remove a entry, and call it theEntry.
   Go through the list wordEntries and look for entries which aren't
   the start entry, don't have previous set yet, and are one letter
   different from theEntry.  For each one you find, call it nextEntry.
   Set nextEntry previous to theEntry and add nextEntry to the queue.

   If the word in nextEntry is the target, then report success.  To get
   the solution in reverse order, follow previous back to the start
   entry.  Display the solution in forward order.

   Test using TestWordPath.

